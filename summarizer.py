import subprocess
import re

def markdown_to_html(text):
    # Convert headings
    text = re.sub(r'^\#{3} (.*)', r'<h3>\1</h3>', text, flags=re.MULTILINE)
    text = re.sub(r'^\#{2} (.*)', r'<h2>\1</h2>', text, flags=re.MULTILINE)
    text = re.sub(r'^\# (.*)', r'<h1>\1</h1>', text, flags=re.MULTILINE)

    # Convert bold and italics
    text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
    text = re.sub(r'\*(.*?)\*', r'<em>\1</em>', text)

    # Convert links [text](url)
    text = re.sub(r'\[(.*?)\]\((.*?)\)', r'<a href="\2">\1</a>', text)

    # Convert bullet points
    lines = text.splitlines()
    html_lines = []
    in_list = False
    for line in lines:
        if line.strip().startswith(("‚Ä¢", "-", "*")):
            if not in_list:
                html_lines.append("<ul>")
                in_list = True
            html_lines.append(f"<li>{line[1:].strip()}</li>")
        else:
            if in_list:
                html_lines.append("</ul>")
                in_list = False
            if line.strip():
                html_lines.append(f"<p>{line}</p>")
    if in_list:
        html_lines.append("</ul>")

    return "\n".join(html_lines)

def format_as_html(summary_text):
    html_summary = markdown_to_html(summary_text)
    return f"""
    <html>
      <body style="font-family:Segoe UI, sans-serif; color:#333;">
        <span style="display:none;">
          Your daily AI-curated cybersecurity fraud digest. Trends, breaches, and updates.
        </span>
        <h2>üõ°Ô∏è Cybersecurity Fraud Trends Digest</h2>
        <p>Here's your daily briefing tailored for founders and PMs:</p>
        <div style="background-color:#f9f9f9; padding:15px; border-left:5px solid #0a84ff; margin-top:10px; margin-bottom:20px;">
          {html_summary}
        </div>
        <p>üß† <strong>Pro Tip:</strong> Stay vigilant and implement zero-trust security. The threats are evolving fast.</p>
        <p style="font-size:0.9em; color:#888;">üö® Digest generated by your AI agent with <strong>LLaMA</strong> via <em>Ollama</em></p>
      </body>
    </html>
    """

def summarize_with_llama(items):
    if not items:
        return "<h2>üõë No cybersecurity fraud trends today.</h2>"

    prompt = (
       "Summarize these cybersecurity fraud headlines as bullet points. Each should include the article title and a link if possible. " +
       "Format for busy startup founders. Then add 3‚Äì5 key insights at the end.\n\n" +
       "\n".join(items)
    )
    try:
        result = subprocess.run(
            ["ollama", "run", "llama3.2:latest", prompt],
            capture_output=True,
            text=True
        )
        summary = result.stdout.strip()
        return format_as_html(summary)
    except Exception as e:
        return f"<h2>‚ö†Ô∏è Failed to summarize using LLaMA</h2><p>{e}</p>"